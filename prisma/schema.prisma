generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model content {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title           String       @db.VarChar(255)
  body            String
  seo_score       Int
  user_id         String       @db.Uuid
  organization_id String       @db.Uuid
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            user         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model guest {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name      String       @db.VarChar(255)
  last_name       String       @db.VarChar(255)
  email           String       @unique @db.VarChar(255)
  organization_id String       @db.Uuid
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model organization {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description  String?        @db.VarChar(255)
  name         String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  user_id      String         @db.Uuid
  tenant_id    String         @db.VarChar(255)
  content      content[]
  guest        guest[]
  user         user           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  seo_status   seo_status[]
  seo_strategy seo_strategy[]
}

model seo_status {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status          String       @db.VarChar(255)
  keywords        String       @db.VarChar(255)
  backlinks       Int
  traffic         Int
  organization_id String       @db.Uuid
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model seo_strategy {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  strategy        String       @db.VarChar(255)
  goals           String       @db.VarChar(255)
  tactics         String       @db.VarChar(255)
  organization_id String       @db.Uuid
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  content      content[]
  organization organization[]
}
